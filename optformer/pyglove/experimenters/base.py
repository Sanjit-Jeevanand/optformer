# Copyright 2024 Google LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Base classes for defining tasks / experimenters using PyGlove API."""
import abc
from typing import Any, Union
import pyglove as pg

PrimitiveType = Union[float, int, str]  # Possible non-symbolic PyGlove outputs.
CorrectSuggestionType = Union[PrimitiveType, pg.Symbolic]

# TODO: Use correct type once PyType is PyGlove-friendly.
TempSuggestionType = Any


class PyGloveExperimenter(metaclass=abc.ABCMeta):
  """Abstraction for PyGlove-based benchmarks, inspired by Vizier Experimenters.

  Our types are based around materialized full-information `pg.Symbolic` rather
  than barebones `pg.DNA`/`pg.DNASpec`.

  Note that `pg.Symbolic -> pg.DNA/pg.DNASpec` is a lossy conversion.
  """

  @abc.abstractmethod
  def evaluate(self, suggestion: TempSuggestionType) -> float:
    """Evaluates the suggestion and returns corresponding objective.

    Args:
      suggestion: Suggestion to be evaluated. Usually is the `example` returned
        from `pg.sample()`. Either a primitive Python object (float, int, str)
        or a pg.Symbolic.
    """

  @abc.abstractmethod
  def search_space(self) -> pg.Symbolic:
    """The search configuration generated by this experimenter.

    Usually sent to the `hyper_value` arg of `pg.sample()`.
    """
